<?php

/**
 * @file
 * Functions to support theming in the eCMS theme.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ecms_theme_suggestions_page_alter(array &$suggestions, array $variables): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof EntityInterface) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ecms_preprocess_page(array &$variables): void {
  $config = \Drupal::config('system.site');

  // Attach header variables.
  $variables['header_preprocess_values']['site_name'] = $config->get('name');
  $variables['header_preprocess_values']['site_logo'] = theme_get_setting('logo.url');
  $variables['header_preprocess_values']['logo_only'] = theme_get_setting('logo_only');
  $variables['header_preprocess_values']['top_line'] = ['#plain_text' => theme_get_setting('header_top_line')];
  $variables['header_preprocess_values']['main_line'] = ['#plain_text' => theme_get_setting('header_main_line')];
  $variables['header_preprocess_values']['bottom_line'] = ['#plain_text' => theme_get_setting('header_bottom_line')];

  // Attach footer variables.
  $variables['footer_preprocess_values']['footer_left'] = [
    '#type' => 'processed_text',
    '#text' => theme_get_setting('footer_left')['value'],
    '#format' => theme_get_setting('footer_left')['format'],
  ];

  $variables['footer_preprocess_values']['footer_center'] = [
    '#type' => 'processed_text',
    '#text' => theme_get_setting('footer_center')['value'],
    '#format' => theme_get_setting('footer_center')['format'],
  ];

  $variables['footer_preprocess_values']['footer_right'] = [
    '#type' => 'processed_text',
    '#text' => theme_get_setting('footer_right')['value'],
    '#format' => theme_get_setting('footer_right')['format'],
  ];

  $variables['footer_preprocess_values']['state_info'] = [
    '#type' => 'processed_text',
    '#text' => theme_get_setting('footer_state_info')['value'],
    '#format' => theme_get_setting('footer_state_info')['format'],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function ecms_preprocess_html(array &$variables): void {

  // Add paletteClass from theme settings form.
  $paletteClass = 'qh__t__' . theme_get_setting('color_palette');
  $variables['palette'] = $paletteClass;
}

/**
 * Implements hook_theme().
 */
function ecms_theme(array $existing, string $type, string $theme, string $path): array {
  $templates = [];
  if ($theme === 'ecms') {
    // Workaround for the core bug found here:
    // https://www.drupal.org/project/drupal/issues/3071201
    // html.twig files were being discovered outside of the templates directory.
    $templates = drupal_find_theme_functions($existing, [$theme]);
    $templates += drupal_find_theme_templates($existing, '.html.twig', "{$path}/templates");
  }
  return $templates;
}

/**
 * Implements hook_preprocess_paragraph() for the paragraph__media_item.
 */
function ecms_preprocess_paragraph__media_item(array &$variables): void {
  $paragraph = $variables['paragraph'];

  if ($paragraph->field_media_item->isEmpty()) {
    return;
  }

  // We need to know the current language for some requests.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['langcode'] = $language;

  $media_type = $paragraph->field_media_item->entity->bundle();

  if ($media_type === 'media_item_image') {
    $variables['media_type'] = 'img';
  }

  if ($media_type === 'media_item_video') {
    $variables['media_type'] = 'video';
  }
}

/**
 * Implements hook_preprocess_paragraph() for the paragraph__gallery_item.
 */
function ecms_preprocess_paragraph__gallery_item(array &$variables): void {
  $paragraph = $variables['paragraph'];

  if ($paragraph->field_gallery_item->isEmpty()) {
    return;
  }

  // We need to know the current language for some requests.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['langcode'] = $language;
}

/**
 * Implements hook_preprocess_media() for the media__file element.
 */
function ecms_preprocess_media__file(array &$variables): void {
  $media = $variables['media'];

  // Grab file title.
  $variables['file_title'] = $media->get('field_file')->entity->getFilename();

  // Grab link behavior.
  $variables['link_behavior'] = $media->get('field_file_link_behavior')->value;

  // Determine file type.
  $file_type = pathinfo($variables['file_title'], PATHINFO_EXTENSION);

  // Grab file size and put it into a readable string.
  $file_size_raw = $media->get('field_file_size')->value;
  $variables['file_size'] = _filesize_formatted(intval($file_size_raw));

  // Grab file url.
  $variables['file_url'] = file_create_url($media->get('field_file')->entity->uri->value);

  // Determine file icon and what to label file.
  switch ($file_type) {
    case 'pdf':
      $variables['file_type_icon'] = 'file-pdf';
      $variables['file_type_readable'] = t('PDF file');
      break;

    case 'doc':
    case 'docx':
      $variables['file_type_icon'] = 'file-word';
      $variables['file_type_readable'] = t('Word file');
      break;

    case 'csv':
    case 'xls':
    case 'xlsx':
      $variables['file_type_icon'] = 'file-excel';
      $variables['file_type_readable'] = t('Excel file');
      break;

    case 'ppt':
    case 'pptx':
      $variables['file_type_icon'] = 'file-powerpoint';
      $variables['file_type_readable'] = t('Powerpoint file');
      break;

    default:
      $variables['file_type_icon'] = 'file-generic';
      $variables['file_type_readable'] = t('@file_type file', ['@file_type' => $file_type]);
  }
}

/**
 * Helper function that converts bytes into an array with file size information.
 */
function _filesize_formatted(int $bytes): array {
  if ($bytes < 1000000) {
    return [
      'amount' => t('less than 1'),
      'short_format' => 'mb',
      'long_format' => 'megabytes',
    ];
  }

  $units = ['b', 'kb', 'mb', 'gb', 'tb'];
  $units_expanded = [
    t('bytes'),
    t('kilobytes'),
    t('megabytes'),
    t('gigabytes'),
    t('terabytes'),
  ];

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);

  $bytes /= pow(1024, $pow);

  $converted_bytes = round($bytes, 0);

  return [
    'amount' => t('about @converted_bytes', ['@converted_bytes' => $converted_bytes]),
    'short_format' => $units[$pow],
    'long_format' => $units_expanded[$pow],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container templates.
 *
 * Add suggestions, as by default none are provided.
 */
function ecms_theme_suggestions_container_alter(array &$suggestions, array $variables): array {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] === 'view') {
    $suggestions[] = 'container__view__' . $element['#name'];
    $suggestions[] = 'container__view__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] !== 'container') {
    $suggestions[] = 'container__' . $element['#type'];
  }

  if (isset($element['#type']) && $element['#type'] === 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_view().
 */
function ecms_preprocess_views_view(array &$variables): void {
  $view = $variables['view'];
  $variables['title'] = $view->getTitle();
}

/**
 * Implements hook_preprocess_menu().
 */
function ecms_preprocess_menu__minor(array &$variables): void {
  // Load level one menu links.
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $parameters->setMinDepth(1);

  $minor_nav = $menu_tree->load('main', $parameters);
  foreach ($minor_nav as $level) {
    if ($level->inActiveTrail) {
      $variables['level_one_link']['title'] = $level->link->getTitle();
      $variables['level_one_link']['url'] = $level->link->getUrlObject()->toString();

      $current_path = \Drupal::request()->getRequestUri();
      if ($variables['level_one_link']['url'] === $current_path) {
        $variables['level_one_link']['active'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function ecms_theme_suggestions_input_alter(array &$suggestions, array $variables): void {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_form_alter().
 */
function ecms_form_alter(&$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id === 'ecms_search_block_form'
    || $form['#id'] === "views-exposed-form-site-search-page-1"
    || $form['#id'] === "views-exposed-form-acquia-search-page"
    || $form['#id'] === "views-exposed-form-acquia-search-page-1"
  ) {

    // Input provided by search view exposed form.
    if (isset($form['search_api_fulltext'])) {
      $form['search_api_fulltext']['#theme_wrappers'] = [];
    }

    // Input provided by ecms_search_block_form.
    if (isset($form['search_input'])) {
      $form['search_input']['#attributes']['class'][] = 'qh__site-search__query';
    }

    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search';
  }
}

/**
 * Implements hook_preprocess_node().
 */
function ecms_preprocess_node__publication(array &$variables): void {
  $node = $variables['node'];

  if ($node->field_publication_url->isEmpty()) {
    return;
  }

  // Grab publication url.
  $variables['publication_url'] = trim($node->field_publication_url->first()->getUrl()->getUri());

  // Determine file type.
  $publication_type = pathinfo($variables['publication_url'], PATHINFO_EXTENSION);

  // Determine publication icon and what to label publication.
  switch ($publication_type) {
    case 'pdf':
      $variables['enable_download'] = TRUE;
      $variables['publication_icon'] = 'file-pdf';
      $variables['publication_readable'] = t('PDF file');
      break;

    case 'doc':
    case 'docx':
      $variables['enable_download'] = TRUE;
      $variables['publication_icon'] = 'file-word';
      $variables['publication_readable'] = t('Word file');
      break;

    case 'csv':
    case 'xls':
    case 'xlsx':
      $variables['enable_download'] = TRUE;
      $variables['publication_icon'] = 'file-excel';
      $variables['publication_readable'] = t('Excel file');
      break;

    case 'ppt':
    case 'pptx':
      $variables['enable_download'] = TRUE;
      $variables['publication_icon'] = 'file-powerpoint';
      $variables['publication_readable'] = t('Powerpoint file');
      break;

    default:
      $variables['enable_download'] = FALSE;
      $variables['publication_icon'] = 'globe';
      $variables['publication_readable'] = t('Web page');
  }
}

/**
 * Implements hook_preprocess_node().
 */
function ecms_preprocess_node(array &$variables): void {
  // We need to know the current language for some requests.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['langcode'] = $language;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ecms_preprocess_paragraph__publication_list(array &$variables): void {
  $paragraph = $variables['paragraph'];

  // Set the cache contexts to the audience_restriction query parameter.
  $variables['#cache']['contexts'][] = 'url.query_args:audience_restriction';

  // Get ?audience_restriction value.
  $audience_url_restriction = \Drupal::request()->get('audience_restriction');

  // Set target audience if there is one.
  if (!empty($audience_url_restriction)) {
    $audience = $audience_url_restriction;
  }
  else {
    $audience = $paragraph->get('field_publication_list_audience')->getString();
  }

  // Set language restriction if there is one.
  $language = $paragraph->get('field_publication_list_language')->getString();
  $variables['lang_label'] = TRUE;

  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');

  // Query all publications.
  $query = $node_storage->getQuery();
  $query->condition('type', 'publication')
    ->condition('status', 1)
    ->sort('title', "ASC");

  if ($audience) {
    $query->condition('field_publication_audiences', $audience);
  }

  if ($language) {
    $variables['lang_label'] = FALSE;
    $query->condition('langcode', $language);
  }

  $nids = $query->execute();

  // Guard against no nodes.
  if (empty($nids)) {
    return;
  }

  // Load multiple nodes.
  $nodes = $node_storage->loadMultiple($nids);
  $publications_types = [];

  foreach ($nodes as $node) {
    // Get proper language name.
    $language = $node->language()->getName();

    // Get all referenced entities.
    $types_field = $node->get('field_publication_types')->referencedEntities();

    // Build out mutli-dimensional array.
    foreach ($types_field as $type) {
      $publications_types[intval($type->getWeight())][$type->get('name')->value][$language][] = $node;
    }
  }

  $builder = $entity_type_manager->getViewBuilder('node');

  // Pop english to top and load our node views.
  foreach ($publications_types as &$weight) {
    foreach ($weight as &$type) {

      if (!empty($type['English'])) {
        $type = ['English' => $type['English']] + $type;
      }
      else {
        ksort($type);
      }

      foreach ($type as &$language) {
        // Return a list of rendered teaser nodes.
        if ($language !== NULL) {
          $language = $builder->viewMultiple($language, 'teaser');
        }
      }
    }
  }

  // Sort publications by key.
  ksort($publications_types);

  $variables['publications'] = $publications_types;

  // Check if the audience form is enabled.
  $variables['audience_form'] = FALSE;

  if ($paragraph->get('field_publication_list_form')->getString() === '1') {
    $variables['audience_form'] = \Drupal::formBuilder()->getForm('Drupal\ecms_blocks\Form\PublicationAudienceForm');
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ecms_preprocess_block(array &$variables): void {
  // Block labels are not translated properly.
  // @see: https://www.drupal.org/project/drupal/issues/2810457#comment-12625567
  if ($variables['elements']['#base_plugin_id'] === 'inline_block' || $variables['elements']['#base_plugin_id'] === 'block_content') {
    if (!empty($variables['label']) && !empty($variables['content']['#block_content'])) {
      // Use the correct language for the block label.
      $variables['label'] = $variables['content']['#block_content']->label();
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ecms_preprocess_paragraph__numbered_step_item(&$variables): void {

  $parent = $variables['paragraph']->getParentEntity();

  if ($parent->bundle() === 'basic_page') {

    // Get entity_reference_revisions field.
    $components = $parent->get('field_basic_page_paragraphs');

    // Find each consective numbered list item and put it in a list.
    // If the step is followed by a different paragraph bundle the list ends.
    // If the step is the last item in the content array the list ends.
    // If a list ends a new list is started unless there are no more paragraphs.
    $lists = [];
    $list_count = 0;
    $current_pid = $variables['paragraph']->id();

    // Set default flags.
    $variables['list_start'] = FALSE;
    $variables['list_end'] = FALSE;

    // Fetch all reference paragraphs for the node.
    $paragraphs = $components->referencedEntities();

    foreach ($paragraphs as $key => $paragraph) {
      if ($paragraph->bundle() === 'numbered_step_item') {

        // Check if start key has been set for current list.
        if (!isset($lists[$list_count]['start'])) {
          $lists[$list_count]['start'] = $paragraph->id();

          // Add flag to current paragraph that it is a start item.
          if ($paragraph->id() === $current_pid) {
            $variables['list_start'] = TRUE;
          }
        }

        // Check if end key has been set for current list.
        // Or if we have run out of paragraphs.
        if (!isset($paragraphs[$key + 1]) || $paragraphs[$key + 1]->bundle() !== 'numbered_step_item') {
          $lists[$list_count]['end'] = $paragraph->id();

          // Add flag to current paragraph that it is an end item.
          if ($paragraph->id() === $current_pid) {
            $variables['list_end'] = TRUE;
          }

          // Start new list.
          $list_count += 1;
        }

        // If this is the current pid we can leave after it's flags are set.
        if ($paragraph->id() === $current_pid) {
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ecms_preprocess_paragraph__location_list(array &$variables): void {
  $paragraph = $variables['paragraph'];

  // Get necessary services.
  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');
  $node_builder = $entity_type_manager->getViewBuilder('node');

  // Set the cache contexts to the location_restriction query parameter.
  $variables['#cache']['contexts'][] = 'url.query_args:location_restriction';

  // Check if the paragraph is targeting a specific category.
  if ($paragraph->get('field_location_list_category')->isEmpty()) {

    // Check if the exposed form is enabled on the paragraph.
    if ($paragraph->get('field_location_list_form')->getString() === '1') {
      $variables['category_form'] = \Drupal::formBuilder()->getForm('Drupal\ecms_blocks\Form\LocationCategoryForm');
    }

    // Get ?location_restriction value.
    $location_url_restriction = \Drupal::request()->get('location_restriction');

    if (!empty($location_url_restriction)) {
      $category = $location_url_restriction;
    }
  }
  else {
    // Get the category and disable the form.
    $category = $paragraph->get('field_location_list_category')->getString();
    $variables['category_form'] = FALSE;
  };

  // Query all locations.
  $query = $node_storage->getQuery();
  $query->condition('type', 'location')
    ->condition('status', 1)
    ->sort('title', "ASC");

  if ($category) {
    $query->condition('field_location_category', $category);
  }

  $nids = $query->execute();

  // Guard against no nodes.
  if (empty($nids)) {
    return;
  }

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['langcode'] = $language;

  // Load teaser displays for each location.
  $nodes = $node_storage->loadMultiple($nids);
  $teasers = $node_builder->viewMultiple($nodes, 'teaser', $language);

  $variables['locations'] = $teasers;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function ecms_preprocess_paragraph__person_list(array &$variables): void {
  $paragraph = $variables['paragraph'];

  // Get necessary services.
  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');
  $node_builder = $entity_type_manager->getViewBuilder('node');

  // Get current language.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Check if we're listing all person nodes or a specific department.
  if ($paragraph->get('field_department_category')->isEmpty()) {

    // Query all person nodes.
    $query = $node_storage->getQuery();
    $query->condition('type', 'person')
      ->condition('status', 1)
      ->sort('field_person_last_name', "ASC");

    $nids = $query->execute();

    // Guard against no nodes.
    if (empty($nids)) {
      return;
    }

    // Return a list of rendered person teaser nodes.
    $nodes = $node_storage->loadMultiple($nids);
    $variables['person_listing'] = $node_builder->viewMultiple($nodes, 'teaser', $language);
    $variables['list_mode'] = "full";
  }
  else {
    // A term filter was selected.
    // Find all person nodes that reference this term.
    $parent_term = $paragraph->get('field_department_category')->referencedEntities()[0];
    $parent_tid = $parent_term->get('tid')->value;

    // Guard against empty term.
    if (!$parent_tid) {
      return;
    }

    // Build out an array of arrays with terms and their related person nodes.
    $term_person_list = [
      'term_name' => $parent_term->get('name')->value,
      'child_terms' => [],
      'persons' => _ecms_query_persons_by_category_tid($parent_tid, $node_storage, $node_builder, $language),
    ];

    // Load child terms.
    $child_terms = $term_storage->loadChildren($parent_tid);

    foreach ($child_terms as $child_term) {
      // Check to see if this child term has person nodes associated.
      $child_term_persons = _ecms_query_persons_by_category_tid($child_term->get('tid')->value, $node_storage, $node_builder, $language);

      if (!empty($child_term_persons)) {
        // Store the child term's person teasers on parent list.
        $term_person_list['child_terms'][$child_term->get('name')->value] = $child_term_persons;
      }
    }

    $variables['person_listing'] = $term_person_list;
    $variables['list_mode'] = "term-list";
  }
}

/**
 * Helper function that returns a list of person teasers for a category term.
 *
 * @param string $tid
 *   The term id to query related persons.
 * @param object $node_storage
 *   The node storage interface.
 * @param object $node_builder
 *   The node builder interface.
 * @param string $language
 *   The langcode to render.
 *
 * @return array
 *   A render array of person teasers.
 */
function _ecms_query_persons_by_category_tid(string $tid, object $node_storage, object $node_builder, string $language): array {
  if (!$tid) {
    return [];
  }

  // See if any person nodes are tied directly to term.
  $query = $node_storage->getQuery();
  $query->condition('type', 'person')
    ->condition('field_person_category', $tid)
    ->condition('status', 1)
    ->sort('field_person_last_name', "ASC");

  $nids = $query->execute();

  $teasers = [];

  // Load teaser displays for each person.
  if (!empty($nids)) {
    $nodes = $node_storage->loadMultiple($nids);
    $teasers = $node_builder->viewMultiple($nodes, 'teaser', $language);
  }

  return $teasers;
}

/**
 * Implements hook_preprocess_node().
 */
function ecms_preprocess_node__person(array &$variables) {
  $node = $variables['node'];

  // Get necessary services.
  $entity_type_manager = \Drupal::entityTypeManager();
  $term_storage = $entity_type_manager->getStorage('taxonomy_term');

  // Get each term reference.
  $categories = $node->get('field_person_category')->referencedEntities();
  $variables['categories'] = [];

  // Loop over each term reference.
  foreach ($categories as $category) {
    $category_tid = $category->id();

    // Load parent terms.
    $category_parent = $term_storage->loadParents($category_tid);

    if (!empty($category_parent)) {
      // Get first item of keyed array.
      $category_parent = reset($category_parent);

      // Get translated version of term.
      $category_parent_trans = \Drupal::service('entity.repository')->getTranslationFromContext($category_parent, $language);

      $variables['categories'][] = $category_parent_trans->getName();
    }
    else {
      // No parent term. Just fetch translated term name of referenced term.
      $category_trans = \Drupal::service('entity.repository')->getTranslationFromContext($category, $language);
      $variables['categories'][] = $category_trans->getName();
    }
  }

  // Comma separate all categories.
  $variables['categories'] = implode(', ', $variables['categories']);
}
