<?php

/**
 * @file
 * ecms_base.install
 */

declare(strict_types=1);

/**
 * @file
 * Install, update and uninstall functions for the ecms_base profile.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileExists;
use Drupal\Core\File\FileSystemInterface;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ecms_base_install() {
  // Assign user 1 the "drupal_admin" role.
  $user = User::load(1);
  $user->roles[] = 'drupal_admin';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);

  $shortcut->save();

  // Install the memcache module.
  $modules_to_install = [
    'memcache',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Set the system site email address.
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
  $configFactory = \Drupal::service('config.factory');
  $config = $configFactory->getEditable('system.site');
  $config->set('mail', 'ecms@notification.ri.gov');
  $config->save();

}

/**
 * Implements hook_install_tasks().
 */
function ecms_base_profile_tasks(): array {
  $tasks = [];

  // Add the task to install the ecms_base module.
  $tasks['ecms_base_apply_workflows'] = [
    'display_name' => t('Apply workflows to all content types.'),
    'type' => 'module',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'ecms_base_apply_workflows',
  ];

  return $tasks;
}

/**
 * Apply the workflows to all content types after the full installation.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function ecms_base_apply_workflows() {
  // Call the workflow service to update configuration.
  \Drupal::service('ecms_workflow.bundle_create')
    ->assignWorkflowToActiveTypes();

  // Delete the default 'Contact' webform.
  try {
    \Drupal::entityTypeManager()
      ->getStorage('webform')
      ->load('contact')->delete();
  }
  catch (EntityStorageException $e) {
    // Trap storage errors.
  }

  // Delete the default 'Contact' node that was created, should be nid 1.
  $values = [
    'type' => 'webform',
    'nid' => 1,
  ];

  // Get the node.
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties($values);

  try {
    \Drupal::entityTypeManager()
      ->getStorage('node')
      ->delete($nodes);
  }
  catch (EntityStorageException $e) {
    // Trap storage errors.
  }

  // Add correct permissions for the nodes/taxonomies.
  /** @var \Drupal\ecms_workflow\EcmsWorkflowBundleCreate $workflowBundleCreate */
  $workflowBundleCreate = \Drupal::service('ecms_workflow.bundle_create');

  /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo */
  $bundleInfo = \Drupal::service('entity_type.bundle.info');

  $nodes = $bundleInfo->getBundleInfo('node');

  // Guard again an empty array of nodes.
  if (!empty($nodes)) {
    // Add the correct workflow to the node types.
    foreach (array_keys($nodes) as $type) {
      $workflowBundleCreate->addContentTypeToWorkflow($type);
    }
  }

  // Set the permissions for all enabled taxonomy bundles.
  $taxonomies = $bundleInfo->getBundleInfo('taxonomy_term');

  // Guard against empty taxonomies.
  if (!empty($taxonomies)) {
    // Add the correct permissions for the taxonomy types.
    foreach (array_keys($taxonomies) as $taxonomy) {
      $workflowBundleCreate->addTaxonomyTypePermissions($taxonomy);
    }
  }
}

/**
 * Update Basic HTML configuration.
 */
function ecms_base_update_9001(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_storage->write('editor.editor.basic_html', $install_source->read('editor.editor.basic_html'));
  $active_storage->write('filter.format.basic_html', $install_source->read('filter.format.basic_html'));

  // Make sure the pathauto and redirect modules are installed.
  \Drupal::service('module_installer')->install(['pathauto']);
  \Drupal::service('module_installer')->install(['redirect']);

}

/**
 * Updates to run for the 0.1.3 tag.
 */
function ecms_base_update_9013(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Install the external links module.
  \Drupal::service('module_installer')->install(['extlink']);

  // Change the extlink settings to use what is in ecms_base profile.
  $active_storage->write('extlink.settings', $install_source->read('extlink.settings'));

  // Make sure the scheduler module is installed.
  \Drupal::service('module_installer')->install(['scheduler']);

  // Call the workflow service to update configuration.
  \Drupal::service('ecms_workflow.bundle_create')
    ->assignWorkflowToActiveTypes();

  // Install the SVG Image module.
  \Drupal::service('module_installer')->install(['svg_image']);

}

/**
 * Updates to run for the 0.1.4 tag.
 */
function ecms_base_update_9014(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $modules_to_install = [
    'pathauto',
    'redirect',
    'key',
    'encrypt',
    'real_aes',
    'webform_encrypt',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  $active_storage->write('pathauto.settings', $install_source->read('pathauto.settings'));
  $active_storage->write('redirect.settings', $install_source->read('redirect.settings'));

  // Ensure encryption config is updated.
  $active_storage->write('encrypt.settings', $install_source->read('encrypt.settings'));
  $active_storage->write('key.key.encryption_key', $install_source->read('key.key.encryption_key'));
  $active_storage->write('encrypt.profile.webform_encryption', $install_source->read('encrypt.profile.webform_encryption'));
}

/**
 * Updates to run for the 0.1.7 tag.
 */
function ecms_base_update_9017(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Ensure scheduler permissions are updated.
  $active_storage->write('user.role.content_publisher', $install_source->read('user.role.content_publisher'));
  $active_storage->write('user.role.site_admin', $install_source->read('user.role.site_admin'));

  $modules_to_install = [
    'twig_tweak',
    'ecms_distribution',
  ];

  // Enable eCMS distribution module.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.1.9 tag.
 */
function ecms_base_update_9019(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Add the social navigation menu.
  $active_storage->write('system.menu.social-navigation', $install_source->read('system.menu.social-navigation'));

  // Add scheduler settings.
  $active_storage->write('scheduled_transitions.settings', $install_source->read('scheduled_transitions.settings'));

  // Install new modules.
  $modules_to_install = [
    'paragraphs_type_permissions',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.2.0 tag.
 */
function ecms_base_update_9020(array &$sandbox): void {
  // Install new modules.
  $modules_to_install = [
    'disable_language',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.2.1 tag.
 */
function ecms_base_update_9021(array &$sandbox): void {
  // Install new modules.
  $modules_to_install = [
    'ecms_languages',
    'language_cookie',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  // Disable existing modules.
  $modules_to_uninstall = [
    'disable_language',
    'scheduler',
  ];

  // Make sure necessary modules are uninstalled.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Updates to run for the 0.2.2 tag.
 */
function ecms_base_update_9022(array &$sandbox): void {
  // Install new modules.
  $modules_to_install = [
    'easy_breadcrumb',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $theme_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Add the breadcrumbs block.
  $active_storage->write('block.block.breadcrumbs', $theme_source->read('block.block.breadcrumbs'));
}

/**
 * Updates to run for the 0.2.6 tag.
 */
function ecms_base_update_9026(array &$sandbox): void {
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  // Reinstall the features that were no longer installed on the Covid site.
  $modules_to_install = [
    'ecms_basic_page',
    'ecms_event',
    'ecms_landing_page',
    'ecms_location',
    'ecms_notification',
    'ecms_paragraphs',
    'ecms_person',
    'ecms_press_release',
    'ecms_promotions',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $theme_source */
  $theme_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  /** @var \Drupal\Core\Config\FileStorage $profile_source */
  $profile_source = new FileStorage($path . "/config/install/");

  // Add the search view.
  $active_storage->write('views.view.site_search', $profile_source->read('views.view.site_search'));

  // Add the header inner search block.
  $active_storage->write('block.block.searchblock', $theme_source->read('block.block.searchblock'));

  // Add the exposed form block.
  $active_storage->write('block.block.exposedformsite_searchpage_1', $theme_source->read('block.block.exposedformsite_searchpage_1'));
}

/**
 * Updates to run for the 0.2.7 tag.
 */
function ecms_base_update_9027(array &$sandbox): void {

  // Install the newly introduced SEO modules.
  $modules_to_install = [
    'google_tag',
    'metatag',
    'simple_sitemap',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates for new modules.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.form_author',
    'user.role.site_admin',
    'google_tag.settings',
    'simple_sitemap.settings',
    'simple_sitemap.custom_links.default',
    'simple_sitemap.variants.default_hreflang',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.2.8 tag.
 */
function ecms_base_update_9028(array &$sandbox): void {
  // Config updates for new modules.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.2.9 tag.
 */
function ecms_base_update_9029(array &$sandbox): void {
  // Install the newly introduced role delegation module.
  $modules_to_install = [
    'role_delegation',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates for new modules.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.3.0 tag.
 */
function ecms_base_update_9030(array &$sandbox): void {
  // Install the ecms_publications feature by default.
  // Install the newly introduced purge modules too.
  $modules_to_install = [
    'acquia_purge',
    'ecms_publications',
    'purge',
    'purge_drush',
    'purge_processor_cron',
    'purge_processor_lateruntime',
    'purge_queuer_coretags',
    'purge_ui',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  $workflow_source = new FileStorage($path . "/modules/custom/ecms_workflow/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'page_manager.page.moderation_dashboard',
    'page_manager.page_variant.moderation_dashboard-panels_variant-0',
    'views.view.moderation_dashboard_recent_changes',
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  $updatedModuleConfig = [
    'workflows.workflow.editorial',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $workflow_source->read("{$config}"));
  }

  // Config updates.
  $acquia_path = \Drupal::service('extension.list.profile')->getPath('ecms_acquia');
  $acquia_config_source = new FileStorage($acquia_path . "/config/install/");

  $acquiaConfig = [
    'purge.logger_channels',
    'purge.plugins',
    'purge_queuer_coretags.settings',
  ];

  foreach ($acquiaConfig as $config) {
    $active_storage->write("{$config}", $acquia_config_source->read("{$config}"));
  }

  // Install the ecms_claro theme.
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $themeInstaller */
  $themeInstaller = \Drupal::service('theme_installer');
  $themeInstaller->install(['ecms_claro']);

  // Set the ecms_claro theme as the admin theme.
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
  $configFactory = \Drupal::service('config.factory');
  $config = $configFactory->getEditable('system.theme');
  $config->set('admin', 'ecms_claro');
  $config->save();
}

/**
 * Updates to run for the 0.3.3 tag.
 */
function ecms_base_update_9033(array &$sandbox): void {
  // Install the locale module for interface translations.
  $modules_to_install = [
    'locale',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates for new modules.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_author',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.3.4 tag.
 */
function ecms_base_update_9034(array &$sandbox): void {
  // Install new required modules.
  $modules_to_install = [
    'syslog',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Disable existing modules.
  $modules_to_uninstall = [
    'views_ui',
  ];

  // Make sure necessary modules are uninstalled.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'system.performance',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.3.9 tag.
 */
function ecms_base_update_9039(array &$sandbox): void {
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $theme_source */
  $theme_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $active_storage->write('block.block.sitenotifications', $theme_source->read('block.block.sitenotifications'));

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'user.role.content_author',
    'user.role.form_author',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.1 tag.
 */
function ecms_base_update_9041(array &$sandbox): void {
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }

  // Update the basic page migration config.
  $module_source = new FileStorage($path . "/modules/custom/ecms_migration/config/install/");

  $updatedModuleConfig = [
    'migrate_plus.migration.ecms_basic_page',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $module_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.2 tag.
 */
function ecms_base_update_9042(array &$sandbox): void {
  // Install new required modules.
  $modules_to_install = [
    'honeypot',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'webform.settings',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.3 tag.
 */
function ecms_base_update_9043(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'language.types',
    'filter.format.minimal',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.6 tag.
 */
function ecms_base_update_9046(array &$sandbox): void {
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.7 tag.
 */
function ecms_base_update_9047(array &$sandbox): void {
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'extlink.settings',
    'system.performance',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.8 tag.
 */
function ecms_base_update_9048(array &$sandbox): void {
  // Install new required modules.
  $modules_to_install = [
    'ecms_icon_library',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.4.9 tag.
 */
function ecms_base_update_9049(array &$sandbox): void {
  // Install new required modules.
  $modules_to_install = [
    'media_library_form_element',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.5.1 tag.
 */
function ecms_base_update_9051(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'content_moderation_notifications.content_moderation_notification.ready_for_review',
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }

  // Update the basic page migration config.
  $module_source = new FileStorage($path . "/modules/custom/ecms_migration/config/install/");

  $updatedModuleConfig = [
    'migrate_plus.migration.ecms_basic_page',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $module_source->read("{$config}"));
  }

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  // Query for all pages.
  $query = $node_storage->getQuery()
    ->accessCheck(FALSE);
  $query->condition('type', 'basic_page');

  $nids = $query->execute();

  // Guard against no nodes.
  if (empty($nids)) {
    return;
  }

  // Load nodes and change their format.
  $nodes = $node_storage->loadMultiple($nids);
  foreach ($nodes as $node) {
    $node->field_basic_page_body->format = 'basic_html';
    $node->save();
  }
}

/**
 * Updates to run for the 0.5.4 tag.
 */
function ecms_base_update_9054(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Update the basic page migration config.
  $module_source = new FileStorage($path . "/modules/custom/ecms_migration/config/install/");

  $updatedModuleConfig = [
    'migrate_plus.migration.ecms_file',
    'migrate_plus.migration.ecms_file_redirect',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $module_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.5.5 tag.
 */
function ecms_base_update_9055(array &$sandbox): void {

  // Install the new module.
  $modules_to_install = [
    'paragraphs_translation_sync',
  ];

  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  $updatedConfig = [
    'user.role.anonymous',
  ];

  foreach ($updatedConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  // Update the basic page migration config.
  $module_source = new FileStorage($path . "/modules/custom/ecms_migration/config/install/");

  $updatedModuleConfig = [
    'migrate_plus.migration.ecms_file',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $module_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.5.6 tag.
 */
function ecms_base_update_9056(array &$sandbox): void {

  // Find all the files that do have an extension.
  $query = \Drupal::entityQuery("file")
    ->accessCheck(FALSE);
  $query->condition('filename', '.', 'CONTAINS');
  $files_with_extensions = $query->execute();

  // Get all file ids.
  $all_query = \Drupal::entityQuery("file")
    ->accessCheck(FALSE);
  $all_files = $all_query->execute();

  // Result of the diff will be files that don't have extensions.
  $missing_extension_ids = array_diff($all_files, $files_with_extensions);

  /** @var \Drupal\file\FileInterface|null $file*/
  $files_to_rename = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadMultiple($missing_extension_ids);

  foreach ($files_to_rename as $file) {
    $file->setFilename(basename($file->getFileUri()));
    $file->save();
  }

}

/**
 * Updates to run for the 0.5.8 tag.
 */
function ecms_base_update_9058(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'filter.format.basic_html',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.6.2 tag.
 */
function ecms_base_update_9062(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $profile_install_source = new FileStorage($path . "/config/install/");

  $newConfig = [
    'node.type.webform',
    'pathauto.pattern.webform_nodes',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $profile_install_source->read("{$config}"));
  }

  // Copy over generic icons from media module.
  // Taken directly from hook_install in media module.
  $source = \Drupal::service('extension.list.module')->getPath('media') . '/images/icons';
  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  $file_system = \Drupal::service('file_system');

  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
  $files = $file_system->scanDirectory($source, '/.*\\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // When reinstalling the media module we don't want to copy the icons when
    // they already exist. The icons could be replaced (by a contrib module or
    // manually), so we don't want to replace the existing files. Removing the
    // files when we uninstall could also be a problem if the files are
    // referenced somewhere else. Since showing an error that it was not
    // possible to copy the files is also confusing, we silently do nothing.
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      try {
        $file_system->copy($file->uri, $destination, FileExists::Error);
      }
      catch (FileException $e) {
        // Ignore and continue.
      }
    }
  }
}

/**
 * Updates to run for the 0.6.3 tag.
 */
function ecms_base_update_9063(array &$sandbox): void {

  $modules_to_install = [
    'media_entity_download',
  ];

  // Enable modules.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.6.5 tag.
 */
function ecms_base_update_9065(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'honeypot.settings',
    'user.role.anonymous',
    'user.role.authenticated',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.6.6 tag.
 */
function ecms_base_update_9066(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'views.view.media',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  // Disable existing modules.
  $modules_to_uninstall = [
    'history',
  ];

  // Make sure necessary modules are uninstalled.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Updates to run for the 0.6.7 tag.
 */
function ecms_base_update_9067(array &$sandbox): void {
  // Disable existing modules.
  $modules_to_uninstall = [
    'acquia_search_solr',
  ];

  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Updates to run for the 0.7.0 tag.
 */
function ecms_base_update_9070(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'system.file',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.7.1 tag.
 */
function ecms_base_update_9071(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.7.2 tag.
 */
function ecms_base_update_9072(array &$sandbox): void {
  // Disable existing modules.
  $modules_to_uninstall = [
    'http_cache_control',
  ];

  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.form_author',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.7.5 tag.
 */
function ecms_base_update_9075(array &$sandbox): void {

  $media_storage = \Drupal::entityTypeManager()->getStorage('media');

  // Query all files with null list weight.
  $query = $media_storage->getQuery()
    ->accessCheck(FALSE);
  $query->condition('bundle', 'file')
    ->notExists('field_file_list_weight');

  $media_ids = $query->execute();

  // Guard against no files.
  if (empty($media_ids)) {
    return;
  }

  // Loop over entities and set their value to 0.
  $files = $media_storage->loadMultiple($media_ids);
  foreach ($files as $file) {
    $file->set('field_file_list_weight', 0);
    $file->save();
  }

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update eCMS Migration module configuration.
 */
function ecms_base_update_9076(array &$sandbox): void {

  // Don't run if migration module is disabled.
  if (!\Drupal::service('module_handler')->moduleExists('ecms_migration')) {
    return;
  }

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Update the basic page migration config.
  $module_source = new FileStorage($path . "/modules/custom/ecms_migration/config/install/");

  $updatedModuleConfig = [
    'ecms_migration.settings',
    'migrate_plus.migration.ecms_basic_page',
    'migrate_plus.migration.ecms_basic_page_url',
    'migrate_plus.migration.ecms_file',
    'migrate_plus.migration.ecms_file_media',
    'migrate_plus.migration.ecms_file_redirect',
    'migrate_plus.migration.ecms_publications',
  ];

  foreach ($updatedModuleConfig as $config) {
    $active_storage->write("{$config}", $module_source->read("{$config}"));
  }

}

/**
 * Disable the migrate_google_sheets module.
 */
function ecms_base_update_9077(array &$sandbox): void {

  // Disable existing modules.
  $modules_to_uninstall = [
    'migrate_google_sheets',
  ];

  // Make sure necessary modules are uninstalled.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Enable the media_revisions_ui module.
 */
function ecms_base_update_9078(array &$sandbox): void {

  // Enable new modules.
  $modules_to_install = [
    'media_revisions_ui',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

}

/**
 * Update the ecms_event config.
 */
function ecms_base_update_9079(array &$sandbox): void {
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $ecms_event_config_source = new FileStorage($path . "/features/custom/ecms_event/config/install/");

  $ecmsEventConfig = [
    'feeds.feed_type.ical_feed',
  ];

  foreach ($ecmsEventConfig as $config) {
    $active_storage->write("{$config}", $ecms_event_config_source->read("{$config}"));
  }

}

/**
 * Update the site email address.
 */
function ecms_base_update_9080(array &$sandbox): void {

  // Set the system site email address.
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
  $configFactory = \Drupal::service('config.factory');
  $config = $configFactory->getEditable('system.site');
  $config->set('mail', 'ecms@notification.ri.gov');
  $config->save();

}

/**
 * Update the content, media, and files views.
 */
function ecms_base_update_9081(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'views.view.content',
    'views.view.media',
    'views.view.files',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Remove press releases from workflow.
 */
function ecms_base_update_9082(array &$sandbox): void {
  /** @var \Drupal\ecms_workflow\EcmsWorkflowBundleCreate $workflowBundleCreate */
  $workflowBundleCreate = \Drupal::service('ecms_workflow.bundle_create');
  $workflowBundleCreate->removeContentTypeFromWorkflow('press_release');
}

/**
 * Update the media admin view.
 */
function ecms_base_update_9083(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'views.view.media',
    'user.role.content_author',
    'user.role.form_author',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update content publisher permissions.
 */
function ecms_base_update_9084(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_publisher',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Add press_release back to workflow.
 */
function ecms_base_update_9085(array &$sandbox): void {

  // Import new ecms_workflow.settings config.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  $workflow_source = new FileStorage($path . "/modules/custom/ecms_workflow/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'ecms_workflow.settings',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $workflow_source->read("{$config}"));
  }

  /** @var \Drupal\ecms_workflow\EcmsWorkflowBundleCreate $workflowBundleCreate */
  $workflowBundleCreate = \Drupal::service('ecms_workflow.bundle_create');
  $workflowBundleCreate->addContentTypeToWorkflow('press_release');

  // Update the form_author role.
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  $updatedConfig = [
    'user.role.form_author',
  ];

  foreach ($updatedConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  // Install new media modules.
  $modules_to_install = [
    'file_delete',
    'media_entity_file_replace',
    'media_file_delete',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

}

/**
 * Update form viewer role.
 */
function ecms_base_update_9086(array &$sandbox): void {

  // Install entity_print.
  $modules_to_install = [
    'webform_entity_print',
    'entity_print',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.form_author',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Install robotstxt module.
 */
function ecms_base_update_9087(array &$sandbox): void {

  // Install robotstxt.
  $modules_to_install = [
    'robotstxt',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'robotstxt.settings',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update tabs block visibilty.
 */
function ecms_base_update_9088(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $theme_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Update the tabs block.
  $active_storage->write('block.block.tabs', $theme_source->read('block.block.tabs'));

}

/**
 * Update the media admin view.
 */
function ecms_base_update_9089(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'views.view.media',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update the language_negotiation config.
 */
function ecms_base_update_9090(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'language_cookie.negotiation',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update the site_admin role.
 */
function ecms_base_update_9091(array &$sandbox): void {
  // Config updates for new modules.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Update the files view.
 */
function ecms_base_update_9092(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'views.view.files',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Update pathauto patterns.
 */
function ecms_base_update_9093(array &$sandbox): void {

  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $ecms_event_config_source = new FileStorage($path . "/features/custom/ecms_event/config/install/");

  $newConfig = [
    'pathauto.pattern.events',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $ecms_event_config_source->read("{$config}"));
  }

  /** @var \Drupal\Core\Config\FileStorage $profile_install_source */
  $ecms_press_config_source = new FileStorage($path . "/features/custom/ecms_press_release/config/install/");

  $newPressConfig = [
    'pathauto.pattern.press_releases',
  ];

  foreach ($newPressConfig as $config) {
    $active_storage->write("{$config}", $ecms_press_config_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.9.22 tag; install new modules.
 */
function ecms_base_update_9094(array &$sandbox): void {

  $modules_to_install = [
    'menu_admin_per_menu',
    'simple_menu_permissions',
  ];

  // Enable modules.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.9.22 tag; update user permissions.
 */
function ecms_base_update_9095(array &$sandbox): void {

  // Config updates for menu permissions.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_author',
    'user.role.content_publisher',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.9.23 tag; update user permissions.
 */
function ecms_base_update_9096(array &$sandbox): void {

  // Config updates for content deletion permissions.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'user.role.content_publisher',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

}

/**
 * Updates to run for the 0.9.24 tag; install new custom module.
 */
function ecms_base_update_9097(array &$sandbox): void {

  $modules_to_install = [
    'ecms_search_settings',
  ];

  // Enable modules.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Updates to run for the 0.9.25 tag; install autologout and import config.
 */
function ecms_base_update_9098(array &$sandbox): void {

  $modules_to_install = [
    'autologout',
  ];

  // Enable module before importing related config.
  \Drupal::service('module_installer')->install($modules_to_install);

  // Import user permissions and Automated Logout config settings.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'autologout.role.content_author',
    'autologout.role.content_publisher',
    'autologout.role.drupal_admin',
    'autologout.role.ecms_api_recipient',
    'autologout.role.embed_author',
    'autologout.role.form_author',
    'autologout.role.site_admin',
    'autologout.settings',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.9.30 tag; re-save Editorial Workflow config.
 */
function ecms_base_update_9099(array &$sandbox): void {

  // Get current value of default workflow config.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_workflow_config = $active_storage->read('workflows.workflow.editorial');

  // If active config has no data, load it from install file.
  if (!$active_workflow_config) {
    $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
    /** @var \Drupal\Core\Config\FileStorage $install_source */
    $workflow_source = new FileStorage($path . "/modules/custom/ecms_workflow/config/install/");
    $active_storage->write('workflows.workflow.editorial', $workflow_source->read('workflows.workflow.editorial'));
  }
}

/**
 * Updates to run for the 0.10.1 tag. Import updated config.
 */
function ecms_base_update_9100(array &$sandbox): void {

  // Update config to make "Event List Type" field non-required".
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $ecms_event_config_source = new FileStorage($path . "/features/custom/ecms_event/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $updated_ecms_event_config = [
    'field.field.paragraph.event_list.field_event_list_type',
  ];

  foreach ($updated_ecms_event_config as $config) {
    $active_storage->write("{$config}", $ecms_event_config_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.10.5 tag. Update Roles config.
 */
function ecms_base_update_9101(array &$sandbox): void {

  // Update orphaned permissions to prep environment for D10 upgrade.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $updated_user_role_config = [
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.site_admin',
  ];
  foreach ($updated_user_role_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.10.8 tag. Enable new modules and reinstall config.
 */
function ecms_base_update_9102(array &$sandbox): void {

  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Remove config that caused errors from being installed in wrong sequence.
  $conflicting_config = [
    'crop.type.focal_point',
    'focal_point.settings',
  ];
  foreach ($conflicting_config as $config) {
    $active_storage->delete("{$config}");
  }

  // Install all new modules now that conflicting config is removed.
  $modules_to_install = [
    'advagg',
    'conditional_fields',
    'entity_usage',
    'field_group',
    'focal_point',
    'iek',
    'quick_node_clone',
  ];
  \Drupal::service('module_installer')->install($modules_to_install);

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'crop.type.focal_point',
    'entity_usage.settings',
    'focal_point.settings',
    'user.role.site_admin',
  ];
  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Updates to run for the 0.10.8 tag. Set GTM config to turn on for Anonymous.
 */
function ecms_base_update_9103(array &$sandbox): void {

  // Only run update if Google Tag module is installed.
  if (\Drupal::moduleHandler()->moduleExists('google_tag')) {

    // Get array of all GTM 'Container' config entities.
    $gtm_container_entities = \Drupal::entityTypeManager()
      ->getStorage('google_tag_container')
      ->loadMultiple();

    // Loop through available Containers.
    // Or, if site has only one Container, find it without knowing exact name.
    foreach ($gtm_container_entities as $gtm_container_entity) {

      // Add 'user' to 'dependencies' section.
      $dependencies = $gtm_container_entity->get('dependencies');
      if (!in_array('user', $dependencies['module'])) {
        $dependencies['module'][] = 'user';
        $gtm_container_entity->set('dependencies', $dependencies);
      }

      // Make sure 'conditions.user_role' section matches our standard config.
      $conditions = $gtm_container_entity->get('conditions');
      $conditions['user_role'] = [
        'id' => 'user_role',
        'negate' => FALSE,
        'context_mapping' => [
          'user' => '@user.current_user_context:current_user',
        ],
        'roles' => [
          'anonymous' => 'anonymous',
        ],
      ];
      $gtm_container_entity->set('conditions', $conditions);

      // Save changes to config entity.
      $gtm_container_entity->save();
    }
  }
}

/**
 * Updates to run for the 0.10.9 tag. Uninstall advagg module by default.
 */
function ecms_base_update_9104(array &$sandbox): void {

  // Now advagg will have to be turned on intentionally, instead of by default.
  $modules_to_uninstall = [
    'advagg',
  ];

  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Updates to run for the 0.11.0 tag. Uninstall deprecated core modules.
 */
function ecms_base_update_9105(array &$sandbox): void {

  // These modules are removed from D10, so we need to disable them now.
  $modules_to_uninstall = [
    'color',
    'quickedit',
    'rdf',
  ];

  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

}

/**
 * Update configuration for Drupal 10.2 preparation.
 */
function ecms_base_update_9106(array &$sandbox): void {
  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');

  // Install all new modules now that conflicting config is removed.
  $modules_to_install = [
    'ckeditor5',
    'layout_builder_iframe_modal',
  ];
  $moduleInstaller->install($modules_to_install);

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'crop.type.focal_point',
    'editor.editor.basic_html',
    'editor.editor.full_html',
    'editor.editor.minimal',
    'entity_usage.settings',
    'focal_point.settings',
    'key.key.ecms_openid_connect_windows_aad_key',
    'openid_connect.client.windows_aad',
    'user.role.site_admin',
  ];

  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  // Uninstall the ckeditor4 module.
  $modules_to_uninstall = [
    'ckeditor',
    'layout_builder_modal',
    'media_library_theme_reset',
  ];

  $moduleInstaller->uninstall($modules_to_uninstall);
}

/**
 * Update the text format permissions.
 */
function ecms_base_update_10200(array &$sandbox): void {
  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'editor.editor.basic_html',
    'editor.editor.full_html',
    'editor.editor.minimal',
    'filter.format.basic_html',
    'filter.format.basic_html',
    'filter.format.full_html',
    'filter.format.minimal',
    'filter.format.plain_text',
    'filter.format.restricted_html',
    'filter.format.webform_default',
    'user.role.anonymous',
    'user.role.authenticated',
    'user.role.content_author',
    'user.role.content_publisher',
    'user.role.form_author',
    'user.role.site_admin',
  ];

  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Add ecms_ckeditor to the installed modules.
 */
function ecms_base_update_10201(array &$sandbox): void {

  $modules_to_install = [
    'ecms_ckeditor',
  ];

  // Enable modules.
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Revoke the site_admin role's permission to administer site configuration.
 */
function ecms_base_update_10202(array &$sandbox): void {
  // Revoke permissions from the site_admin role.
  /** @var \Drupal\user\RoleInterface $siteAdminRole */
  $siteAdminRole = \Drupal::entityTypeManager()
    ->getStorage('user_role')
    ->load('site_admin');
  $siteAdminRole->revokePermission('administer site configuration');
  $siteAdminRole->save();
}

/**
 * Add google_translator to the installed modules.
 */
function ecms_base_update_10203(array &$sandbox): void {

  $modules_to_install = [
    'google_translator',
  ];

  // Make sure necessary modules are installed.
  \Drupal::service('module_installer')->install($modules_to_install);

  // Base profile path.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $theme_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Add the google_translator block.
  $active_storage->write('block.block.googletranslator', $theme_source->read('block.block.googletranslator'));

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Install google_translator config.
  $new_module_config = [
    'google_translator.settings',
  ];
  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }

  // Update the language switch block config.
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $update_source = new FileStorage($path . "/themes/custom/ecms/config/optional/");

  // Import updated configuration for language switcher block.
  $update_block_config = [
    'block.block.languageswitcher',
  ];
  foreach ($update_block_config as $configBlock) {
    $active_storage->write("{$configBlock}", $update_source->read("{$configBlock}"));
  }
}

/**
 * Install the ecms_emergency_notification feature.
 */
function ecms_base_update_10204(array &$sandbox): void {
  $features_to_install = [
    'ecms_emergency_notification',
  ];

  \Drupal::service('module_installer')->install($features_to_install);
}

/**
 * Update the Google translations.
 *
 * Runs as part of 1.0.7 tag.
 */
function ecms_base_update_10205(array &$sandbox): void {
  $config = 'google_translator.settings';

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Base profile path.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  $active_storage->write("{$config}", $install_source->read("{$config}"));
}

/**
 * Install new modules after updating contrib modules.
 *
 * Runs as part of 1.0.8 tag.
 */
function ecms_base_update_10206(array &$sandbox): void {

  $modules_to_install = [
    'js_cookie',
    'jquery_ui_accordion',
  ];
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Install new modules after updating contrib modules.
 *
 * Runs as part of 1.1.1 tag.
 */
function ecms_base_update_10207(array &$sandbox): void {

  $modules_to_install = [
    'metatag_open_graph',
  ];
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Install new modules after updating contrib modules.
 *
 * Runs as part of 1.1.1 tag.
 */
function ecms_base_update_10208(array &$sandbox): void {
  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'honeypot.settings',
  ];

  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Implements hook_update_n().
 */
function ecms_base_update_10209(): void {
  $blockStorage = \Drupal::entityTypeManager()
    ->getStorage('block');

  /** @var \Drupal\block\BlockInterface $translateBlock */
  $translateBlock = $blockStorage
    ->load('googletranslator');

  $translateBlock->setStatus(FALSE);
  $translateBlock->save();

  // Base profile path.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $themeInstallSource = new FileStorage($path . "/themes/custom/ecms/config/optional/");
  $active_storage->write("block.block.ecms_ecmstranslatorgoogletranslator", $themeInstallSource->read("block.block.ecms_ecmstranslatorgoogletranslator"));

  // Set the region of the block.
  /** @var \Drupal\block\BlockInterface $translateBlock */
  $newTranslateBlock = $blockStorage
    ->load('ecms_ecmstranslatorgoogletranslator');
  $newTranslateBlock->setRegion('language_switcher');
  $newTranslateBlock->save();
}

/**
 * Update ecms_emergency_notification features config.
 */
function ecms_base_update_10210(): void {
  $blockStorage = \Drupal::entityTypeManager()
    ->getStorage('block');

  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $themeInstallSource = new FileStorage($path . "/themes/custom/ecms/config/optional/");
  $active_storage->write("block.block.ecms_views_block__emergency_notification_block_1", $themeInstallSource->read("block.block.ecms_views_block__emergency_notification_block_1"));

  // Set the region of the block.
  /** @var \Drupal\block\BlockInterface $translateBlock */
  $newBlock = $blockStorage
    ->load('ecms_views_block__emergency_notification_block_1');
  $newBlock->setRegion('emergency_notification');
  $newBlock->save();
}

/**
 * Unistall the drupal/tour module and install mysql57.
 *
 * Runs as part of 1.1.3 tag.
 */
function ecms_base_update_10211(array &$sandbox): void {
  // Disable existing modules.
  $modules_to_uninstall = [
    'tour',
  ];

  // Make sure necessary module is uninstalled.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

  $modules_to_install = [
    'mysql57',
  ];
  \Drupal::service('module_installer')->install($modules_to_install);
}

/**
 * Import new config for Content Publisher to syndicate Press Releases.
 *
 * Runs as part of 1.1.4 tag.
 */
function ecms_base_update_10212(array &$sandbox): void {
  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Import config, now that environment is prepped with installed modules.
  $new_config = [
    'user.role.content_publisher',
  ];

  foreach ($new_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Install drupal/password_policy module.
 *
 * Runs as part of 1.1.5 tag.
 */
function ecms_base_update_10213(array &$sandbox): void {
  $modules_to_install = [
    'password_policy',
    'password_policy_character_types',
    'password_policy_length',
  ];
  \Drupal::service('module_installer')->install($modules_to_install);
  // Config updates.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');

  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $newConfig = [
    'password_policy.password_policy.password_rules',
    'password_policy.settings',
  ];

  foreach ($newConfig as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Uninstall media_revisions_ui, install fast404, new config for Honeypot.
 *
 * Runs as part of 1.1.6 tag.
 */
function ecms_base_update_10214(array &$sandbox): void {
  $modules_to_install = [
    'fast404',
  ];

  // Enable new modules.
  \Drupal::service('module_installer')->install($modules_to_install);

  $modules_to_uninstall = [
    'media_revisions_ui',
    'layout_builder_expose_all_field_blocks',
  ];

  // Uninstall the unnecessary modules.
  \Drupal::service('module_installer')->uninstall($modules_to_uninstall);

  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'honeypot.settings',
  ];

  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}

/**
 * Update robotstxt config.
 *
 * Runs as part of 1.1.7 tag.
 */
function ecms_base_update_10215(array &$sandbox): void {
  // Get reference to config install directory.
  $path = \Drupal::service('extension.list.profile')->getPath('ecms_base');
  /** @var \Drupal\Core\Config\FileStorage $install_source */
  $install_source = new FileStorage($path . "/config/install/");

  // Get reference to active config storage.
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  // Import config, now that environment is prepped with installed modules.
  $new_module_config = [
    'robotstxt.settings',
  ];

  foreach ($new_module_config as $config) {
    $active_storage->write("{$config}", $install_source->read("{$config}"));
  }
}
