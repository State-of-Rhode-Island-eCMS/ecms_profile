<?php

/**
 * @file
 * File ecms_health_file_migration.module.
 */

declare(strict_types = 1);

use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for the health_file_redirect migration.
 */
function ecms_health_file_migration_migrate_health_file_redirect_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration): void {
  // Ensure we have the right public files directory for the current site.
  $public_file_path = rtrim(\Drupal::service('file_url_generator')->transformRelative(\Drupal::service('file_url_generator')->generateAbsoluteString('public://')), "/");

  // Make sure this is a valid internal Uri.
  $public_file_path = "internal:{$public_file_path}";

  // Replace the DRUPAL_FILE_DIRECTORY constant with the site specific value.
  $row->setSourceProperty('constants/DRUPAL_FILE_DIRECTORY', $public_file_path);
}

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for the health_file_redirect_es migration.
 */
function ecms_health_file_migration_migrate_health_file_redirect_es_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration): void {
  // Ensure we have the right public files directory for the current site.
  $public_file_path = rtrim(\Drupal::service('file_url_generator')->transformRelative(\Drupal::service('file_url_generator')->generateAbsoluteString('public://')), "/");

  // Make sure this is a valid internal Uri.
  $public_file_path = "internal:{$public_file_path}";

  // Replace the DRUPAL_FILE_DIRECTORY constant with the site specific value.
  $row->setSourceProperty('constants/DRUPAL_FILE_DIRECTORY', $public_file_path);
}

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for ecms_health_file_migration.
 */
function ecms_health_file_migration_migrate_health_file_json_to_resource_media_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {

  // Combine the "resource type" values into a single array.
  $type_of_material = $row->getSourceProperty('type_of_material');
  $subtype_of_material = $row->getSourceProperty('subtype_of_material');
  $combined_type_fields = [];
  // Add the non-null and non-empty values to the array.
  if ($type_of_material !== NULL && $type_of_material !== '') {
    $combined_type_fields[] = $type_of_material;
  }
  if ($subtype_of_material !== NULL && $subtype_of_material !== '') {
    $combined_type_fields[] = $subtype_of_material;
  }
  $resource_category_term_ids = ecms_health_file_migration_get_or_create_term_ids($combined_type_fields, 'resource_category');
  $row->setDestinationProperty('field_resource_category', $resource_category_term_ids);

  // Set audience taxonomy.
  $audience = $row->getSourceProperty('audience');
  $audience_term_ids = ecms_health_file_migration_get_or_create_term_ids($audience, 'audience');
  $row->setDestinationProperty('field_audience', $audience_term_ids);

  // Set municipality taxonomy.
  $municipality = $row->getSourceProperty('place');
  $municipality_term_ids = ecms_health_file_migration_get_or_create_term_ids($municipality, 'municipalities');
  $row->setDestinationProperty('field_municipality', $municipality_term_ids);

  // Set topic references.
  $health_topics = $row->getSourceProperty('topic');
  $topic_nids = ecms_health_file_migration_get_node_reference_ids($health_topics, 'topic');
  if (!empty($topic_nids)) {
    $row->setDestinationProperty('field_topic', $topic_nids);
  }

  // Set topic references.
  $professions = $row->getSourceProperty('profession');
  $profession_nids = ecms_health_file_migration_get_node_reference_ids($professions, 'licensee');
  if (!empty($profession_nids)) {
    $row->setDestinationProperty('field_licensee', $profession_nids);
  }

  // Provide a default date if none is provided.
  $created_date = $row->getSourceProperty('date_published');

  if (is_null($created_date)) {
    $row->setSourceProperty('date_published', date_format(new DateTime(), 'Y-m-d'));
  }

  // Provide a default order_form value.
  $online_order = $row->getSourceProperty('order_form');

  if (is_null($online_order)) {
    $row->setSourceProperty('order_form', 0);
  }
  else {
    $row->setSourceProperty('order_form', 1);
  }

}

/**
 * Helper function, matches existing term names, or create new Terms.
 */
function ecms_health_file_migration_get_or_create_term_ids($taxonomy_names_array, $vocabulary_id) {
  // Check and create terms in the destination database if they don't exist.
  $term_ids = [];
  foreach ($taxonomy_names_array as $name) {
    // Case-insensitive search for existing term in the given vocabulary.
    $existing_term = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'name' => mb_strtolower($name),
        'vid' => $vocabulary_id,
      ]);

    if (!empty($existing_term)) {
      // Use the existing term.
      $term_id = key($existing_term);
    }
    else {
      // Create a new term.
      $term = Term::create([
        'vid' => 'resource_category',
        'name' => $name,
      ]);
      $term->save();
      $term_id = $term->id();
    }

    $term_ids[] = $term_id;
  }

  // Return the combined term IDs.
  return $term_ids;
}

/**
 * Helper function, matches existing node titles.
 */
function ecms_health_file_migration_get_node_reference_ids($node_label_array, string $bundle): array {
  // Get node ids from the bundle.
  $node_ids = [];
  foreach ($node_label_array as $k => $name) {
    // Case-insensitive search for existing term in the given vocabulary.
    $existing_node = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties([
        'type' => mb_strtolower($bundle),
        'title' => $name,
      ]);

    if (!empty($existing_node)) {
      // Use the existing node id.
      $node_ids[] = key($existing_node);
    }

  }

  // Return the combined node IDs.
  return $node_ids;
}
