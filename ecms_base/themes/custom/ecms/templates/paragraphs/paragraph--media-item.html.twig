{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if langcode is null %}
  {% set langcode = 'en' %}
{% endif %}

{% set align = '' %}
{% if not paragraph.field_alignment.value is empty %}
  {% set align = paragraph.field_alignment.value %}
{% endif %}

{# Link field is not required. #}
{% set link_url = FALSE %}
{% if not paragraph.field_link is empty %}

  {# Get link url #}
  {% if paragraph.field_link.0.url.external %}
    {% set link_url = content.field_link.0['#url'].getUri() %}
  {% else %}
    {% set link_url = content.field_link.0['#url'] %}
  {% endif %}
{% endif %}

{# See preprocess_paragraph__menu_item #}
{% if media_type == 'img' %}

  {# Prepare the image to be sent to PL #}
  {% set img = '' %}
  {% if paragraph.field_media_item is not empty %}
    {% if paragraph.field_media_item.entity.hasTranslation(langcode) %}
      {% set img_uri = paragraph.field_media_item.entity.translation(langcode).field_media_item_image.entity.getFileUri() %}
      {% set img_alt = paragraph.field_media_item.entity.translation(langcode).field_media_item_image.alt %}
    {% else %}
      {% set img_uri = paragraph.field_media_item.entity.translation('en').field_media_item_image.entity.getFileUri() %}
      {% set img_alt = paragraph.field_media_item.entity.translation('en').field_media_item_image.alt %}
    {% endif %}


    {# TODO: this fails if an uri exists in DB but not on local file system. Need to find a way to check if file exists locally #}
    {% set img = drupal_image(img_uri, 'wide', {alt: img_alt}, true) %}
  {% endif %}

  {% include "@molecules/media-item/media-item.twig" with {
      content: content,
      type: media_type,
      caption: paragraph.field_caption.value,
      size: paragraph.field_size.value,
      align: align,
      link_url: link_url,
      link_title: paragraph.field_link.title,
      img: img,
    }
  %}
{% endif %}

{% if media_type == 'video' %}
  {% set video_source = content.field_media_item|render|striptags("<iframe>") %}

  {% include "@molecules/media-item/media-item.twig" with {
      content: content,
      type: media_type,
      caption: paragraph.field_caption.value,
      size: paragraph.field_size.value,
      align: align,
      source: video_source
    }
  %}
{% endif %}

{% if media_type == 'audio' %}

  {% include "@molecules/media-item/media-item.twig" with {
      content: content,
      type: media_type,
      caption: paragraph.field_caption.value,
      size: paragraph.field_size.value,
      align: align,
      audio_url: audio_url,
      audio_mimetype: audio_mimetype
    }
  %}
{% endif %}
