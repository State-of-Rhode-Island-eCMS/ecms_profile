{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'qh-paragraph',
    'qh--paragraph--' ~ paragraph.bundle|clean_class,
  ]
%}

{# Determine if this is a video or image #}
{% set media_type = paragraph.field_media_item.entity.bundle() %}

{% set type = '' %}
{% if media_type == 'media_item_image' %}
  {% set type = 'img' %}
{% endif %}
{% if media_type == 'media_item_video' %}
  {% set type = 'video' %}
{% endif %}

{% if type == 'img' %}
  {# Get image url #}
  {% set image = paragraph.field_media_item.entity.field_media_item_image %}
  {% set image_url = file_url(image.entity.fileuri) %}

  {% include "@molecules/media-item/media-item.twig" with {
      classes: classes,
      content: content,
      type: type,
      caption: paragraph.field_caption.value,
      size: paragraph.field_size.value,
      align: paragraph.field_alignment.value,
      url: image_url,
      alt: image.alt
    }
  %}
{% endif %}


{% if type == 'video' %}
  {# still needs work #}
  {% set video = paragraph.field_media_item.entity.field_media_item_video_url %}
  {% set video_url = video.entity.fileuri %}

  {% include "@molecules/media-item/media-item.twig" with {
      classes: classes,
      content: content,
      type: type,
      caption: paragraph.field_caption.value,
      size: paragraph.field_size.value,
      align: paragraph.field_alignment.value,
      source: video_url
    }
  %}
{% endif %}
