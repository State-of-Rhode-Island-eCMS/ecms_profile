<?php

/**
 * @file
 * Functions to support theming in the eCMS theme.
 */

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ecms_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__' . $content_type;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ecms_preprocess_page(&$variables) {

  // Attach header variables.
  $variables['header_preprocess_values']['top_line'] = theme_get_setting('header_top_line');
  $variables['header_preprocess_values']['main_line'] = theme_get_setting('header_main_line');
  $variables['header_preprocess_values']['bottom_line'] = theme_get_setting('header_bottom_line');

  // Attach footer variables.
  $variables['footer_preprocess_values']['footer_left'] = theme_get_setting('footer_left')['value'];
  $variables['footer_preprocess_values']['footer_center'] = theme_get_setting('footer_center')['value'];
  $variables['footer_preprocess_values']['footer_right'] = theme_get_setting('footer_right')['value'];
  $variables['footer_preprocess_values']['state_info'] = theme_get_setting('footer_state_info')['value'];
}

/**
 * Implements hook_preprocess_html().
 */
function ecms_preprocess_html(&$variables) {

  // Add paletteClass from theme settings form.
  $paletteClass = 'qh__t__' . theme_get_setting('color_palette');
  $variables['attributes']['class'][] = $paletteClass;
}

/**
 * Implements hook_theme().
 */
function ecms_theme($existing, $type, $theme, $path): array {
  $templates = [];
  if ($theme === 'ecms') {
    // Workaround for the core bug found here:
    // https://www.drupal.org/project/drupal/issues/3071201
    // html.twig files were being discovered outside of the templates directory.
    $templates = drupal_find_theme_functions($existing, [$theme]);
    $templates += drupal_find_theme_templates($existing, '.html.twig', "{$path}/templates");
  }
  return $templates;
}

/**
 * Implements hook_preprocess_paragaph().
 */
function ecms_preprocess_paragraph__media_item(&$variables) {
  $paragraph = $variables['paragraph'];

  $media_type = $paragraph->field_media_item->entity->bundle();

  if ($media_type === 'media_item_image') {
    $variables['media_type'] = 'img';

    $image = $paragraph->get('field_media_item')->entity->get('field_media_item_image');

    if (isset($image->entity->uri)) {
      $variables['image_url'] = file_create_url($image->entity->uri->value);
    }
  }

  if ($media_type === 'media_item_video') {
    $variables['media_type'] = 'video';
  }
}

/**
 * Implements hook_preprocess_paragaph().
 */
function ecms_preprocess_media__file(&$variables): void {
  $media = $variables['media'];

  // Grab file title.
  $variables['file_title'] = $media->get('field_file')->entity->getFilename();

  // Determine file type.
  $file_type = pathinfo($variables['file_title'], PATHINFO_EXTENSION);

  // Grab file size and put it into a readable string.
  $file_size_raw = $media->get('field_file_size')->value;
  $variables['file_size'] = _filesize_formatted(intval($file_size_raw));

  // Grab file url.
  $variables['file_url'] = file_create_url($media->get('field_file')->entity->uri->value);

  // Determine file icon and what to label file.
  switch (TRUE) {
    case ($file_type === 'pdf'):
      $variables['file_type_icon'] = 'pdf';
      $variables['file_type_readable'] = t('PDF file');
      break;

    case ($file_type === 'doc' || $file_type === 'docx'):
      $variables['file_type_icon'] = 'word';
      $variables['file_type_readable'] = t('Word file');
      break;

    case ($file_type === 'csv' || $file_type === 'xls' || $file_type === 'xlsx'):
      $variables['file_type_icon'] = 'excel';
      $variables['file_type_readable'] = t('Excel file');
      break;

    case ($file_type === 'ppt' || $file_type === 'pptx'):
      $variables['file_type_icon'] = 'powerpoint';
      $variables['file_type_readable'] = t('Powerpoint file');
      break;

    default:
      $variables['file_type_icon'] = 'generic';
      $variables['file_type_readable'] = t('@file_type file', ['@file_type' => $file_type]);
  }
}

/**
 * Helper function that converts bytes into an array with file size information.
 */
function _filesize_formatted($bytes): array {
  if ($bytes < 1000000) {
    return [
      'amount' => t('less than 1'),
      'short_format' => 'mb',
      'long_format' => 'megabytes',
    ];
  }

  $units = ['b', 'kb', 'mb', 'gb', 'tb'];
  $units_expanded = [
    t('bytes'),
    t('kilobytes'),
    t('megabytes'),
    t('gigabytes'),
    t('terabytes'),
  ];

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);

  $bytes /= pow(1024, $pow);

  $converted_bytes = round($bytes, 0);

  return [
    'amount' => t('about @converted_bytes', ['@converted_bytes' => $converted_bytes]),
    'short_format' => $units[$pow],
    'long_format' => $units_expanded[$pow],
  ];
}

/**
 * Implements hook_theme_suggestions_hook() for container templates.
 *
 * Add suggestions, as by default none are provided.
 */
function ecms_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] === 'view') {
    $suggestions[] = 'container__view__' . $element['#name'];
    $suggestions[] = 'container__view__' . $element['#name'] . '__' . $element['#display_id'];
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_view().
 */
function ecms_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $variables['title'] = $view->getTitle();
}

/**
 * Implements hook_preprocess_menu().
 */
function ecms_preprocess_menu__minor(&$variables) {
  // Load level one menu links.
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $parameters->setMinDepth(1);

  $minor_nav = $menu_tree->load('main', $parameters);
  foreach($minor_nav as $level) {
    if ( $level->inActiveTrail ) {
      $variables['level_one_link']['title'] = $level->link->getTitle();
      $variables['level_one_link']['url'] = $level->link->getUrlObject()->toString();

      $current_path = \Drupal::request()->getRequestUri();
      if ($variables['level_one_link']['url'] === $current_path) {
        $variables['level_one_link']['active'] = TRUE;
      }
    }
  }
}
