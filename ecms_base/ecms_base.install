<?php

/**
 * @file
 * ecms_base.install
 */

declare(strict_types = 1);

/**
 * @file
 * Install, update and uninstall functions for the ecms_base profile.
 */

use Drupal\user\Entity\User;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\Core\Entity\EntityStorageException;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ecms_base_install() {
  // Assign user 1 the "drupal_admin" role.
  $user = User::load(1);
  $user->roles[] = 'drupal_admin';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);

  $shortcut->save();

  // Call the workflow service to update configuration.
  \Drupal::service('ecms_workflow.bundle_create')
    ->assignWorkflowToActiveTypes();

  // Delete the default 'Contact' webform.
  try {
    \Drupal::entityTypeManager()
      ->getStorage('webform')
      ->load('contact')->delete();
  }
  catch (EntityStorageException $e) {
    // Trap storage errors.
  }

  // Delete the default 'Contact' node that was created, should be nid 1.
  $values = [
    'type' => 'webform',
    'nid' => 1,
  ];

  // Get the node.
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties($values);

  try {
    \Drupal::entityTypeManager()
      ->getStorage('node')
      ->delete($nodes);
  }
  catch (EntityStorageException $e) {
    // Trap storage errors.
  }

  // Add correct permissions for the nodes/taxonomies.
  /** @var \Drupal\ecms_workflow\EcmsWorkflowBundleCreate $workflowBundleCreate */
  $workflowBundleCreate = \Drupal::service('ecms_workflow.bundle_create');

  /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo */
  $bundleInfo = \Drupal::service('entity_type.bundle.info');

  $nodes = $bundleInfo->getBundleInfo('node');

  // Guard again an empty array of nodes.
  if (!empty($nodes)) {
    // Add the correct workflow to the node types.
    foreach (array_keys($nodes) as $type) {
      $workflowBundleCreate->addContentTypeToWorkflow($type);
    }
  }

  // Set the permissions for all enabled taxonomy bundles.
  $taxonomies = $bundleInfo->getBundleInfo('taxonomy_term');

  // Guard against empty taxonomies.
  if (!empty($taxonomies)) {
    // Add the correct permissions for the taxonomy types.
    foreach (array_keys($taxonomies) as $taxonomy) {
      $workflowBundleCreate->addTaxonomyTypePermissions($taxonomy);
    }
  }

}
