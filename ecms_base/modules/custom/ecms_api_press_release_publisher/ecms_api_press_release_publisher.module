<?php

/**
 * @file
 * ecms_api_press_release_publisher.module
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_insert() for the node entity.
 */
function ecms_api_press_release_publisher_node_insert(EntityInterface $entity): void {
  _ecms_api_press_release_publisher_syndicate($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for the node entity.
 */
function ecms_api_press_release_publisher_node_update(EntityInterface $entity): void {
  _ecms_api_press_release_publisher_syndicate($entity);
}

/**
 * Implements hook_entity_presave().
 */
function ecms_api_press_release_publisher_entity_presave(EntityInterface $entity): void {

  // Guard against non press releases or those missing the term ref field.
  if (
    $entity->getEntityTypeId() !== 'node' ||
    $entity->bundle() !== 'press_release' ||
    !$entity->hasField('field_press_release_topics')
  ) {
    return;
  }

  \Drupal::service('ecms_api_press_release_publisher.press_release_manager')
    ->addSiteSourceTermToPressRelease($entity);
}

/**
 * Utility function for calling the syndication for press releases.
 */
function _ecms_api_press_release_publisher_syndicate(NodeInterface $node): void {
  // Guard against a non-press_release.
  if ($node->getType() !== 'press_release') {
    return;
  }

  // Guard against a node that is not using content_moderation.
  if (!$node->hasField('moderation_state')) {
    // We can only act upon nodes in moderation.
    return;
  }

  // Get the moderated state of this revision.
  $moderatedState = array_column(
    $node->get('moderation_state')->getValue(),
    'value'
  );

  // Guard against an empty array.
  if (empty($moderatedState)) {
    return;
  }

  // Deny access to the node if Rabbit Hole is enabled.
  if (\Drupal::moduleHandler()->moduleExists('rabbit_hole')) {
    $node->set('rh_action', 'access_denied');
  }

  if (
    in_array('published', $moderatedState, TRUE) ||
    in_array('archived', $moderatedState, TRUE)
  ) {
    \Drupal::service('ecms_api_publisher.syndicate')->syndicateEntity($node);
  }
}
