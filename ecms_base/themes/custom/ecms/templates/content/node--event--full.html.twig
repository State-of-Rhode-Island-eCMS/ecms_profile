{#
/**
 * @file
 * Theme override to display a event node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% if langcode is null %}
  {% set langcode = 'en' %}
{% endif %}

{# Start date variables #}
{% set start_date = node.field_event_date.value|date('F j, Y') %}
{% set datetime_startdate_format = node.field_event_date.start_value|date('Y-m-d') %}

{# End date variables #}
{% set end_date = node.field_event_date.end_value|date('F j, Y') %}
{% set datetime_enddate_format = node.field_event_date.end_value|date('Y-m-d') %}

{# Time variables #}
{% set start_time = node.field_event_date.value|date('g:ia') %}
{% set datetime_starttime_format = node.field_event_date.value|date('H:i:s') %}
{% set end_time = node.field_event_date.end_value|date('g:ia') %}
{% set datetime_endtime_format = node.field_event_date.end_value|date('H:i:s') %}

{% if start_time != end_time %}
  {% set time = start_time ~ ' - ' ~ end_time %}
{% else %}
  {% set time = start_time %}
{% endif %}

{# Check for all day #}
{%  if datetime_starttime_format == '00:00:00' and datetime_endtime_format == '23:59:00' %}
  {% set allday = TRUE %}
{% endif %}

{# Generate responsive image style #}
{% set img = '' %}
{% if node.field_event_image is not empty %}
  {% if node.field_event_image.entity.hasTranslation(langcode) %}
    {% set img_uri = node.field_event_image.entity.translation(langcode).field_media_image_1.entity.getFileUri() %}
    {% set img_alt = node.field_event_image.entity.translation(langcode).field_media_image_1.alt %}
  {% else %}
    {% set img_uri = node.field_event_image.entity.translation('en').field_media_image_1.entity.getFileUri() %}
    {% set img_alt = node.field_event_image.entity.translation('en').field_media_image_1.alt %}
  {% endif %}

  {# TODO: this fails if an uri exists in DB but not on local file system. Need to find a way to check if file exists locally #}
  {% set img = drupal_image(img_uri, 'wide', {alt: img_alt}, true) %}
{% endif %}

{# Get virtual meeting link url #}
{% if node.field_event_virtual_meeting_url.0.url.external %}
  {% set virtual_link_url = content.field_event_virtual_meeting_url.0['#url'].getUri() %}
{% else %}
  {% set virtual_link_url = content.field_event_virtual_meeting_url.0['#url'] %}
{% endif %}

{# Get registration link url #}
{% if node.field_event_registration_url.0.url.external %}
  {% set registration_link_url = content.field_event_registration_url.0['#url'].getUri() %}
{% else %}
  {% set registration_link_url = content.field_event_registration_url.0['#url'] %}
{% endif %}

{% set location = node.field_event_location.value %}

<article class="qh__single-event">
  <header class="qh__single-event__header">
    <h1 class="qh__h2">{{ title }}</h1>

    {% if img|default %}
      <figure class="qh__single-event__image">
        {{ img }}
      </figure>
    {% endif %}

    <div class="qh__single-event__meta">
      <p>
        <span class="small-text qh__single-event__meta__label">Date: </span>
        {% if start_date == end_date and allday %}
          <!-- If a start date and all day -->
          {{ "All day"|t }} <time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time>

        {% elseif start_date != end_date and allday %}
          <!-- If a start date and end date with all day -->
          {{ "All day from"|t }} <time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time> {{ "to"|t }} <time datetime="{{ datetime_enddate_format }}">{{ end_date }}</time>

        {% elseif start_date == end_date and start_time == end_time %}
          <!-- If a start date, start time -->
          <time datetime="{{ datetime_starttime_format }}"><time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time> — <time datetime="{{ datetime_starttime_format }}">{{ start_time}}</time>

        {% elseif start_date == end_date and start_time|default %}
          <!-- If a start date, start time, end time -->
          <time datetime="{{ datetime_starttime_format }}"><time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time> — <time datetime="{{ datetime_starttime_format }}">{{ start_time}}</time> {{ "to"|t }} <time datetime="{{ datetime_endtime_format }}">{{ end_time }}</time>

        {% elseif start_date != end_date and start_time|default %}
          <!-- If a start date, start time, end date, and end time -->
          <time datetime="{{ datetime_starttime_format }}">{{ "Starting at"|t }} {{ start_time }}</time>, <time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time> {{ "until"|t }} <time datetime="{{ datetime_enddate_format }}">{{ end_time }}</time>, <time datetime="{{ datetime_enddate_format }}">{{ end_date }}</time>

        {% else %}
          <!-- Shouldn't get here but adding it as a safe default. -->
          <time datetime="{{ datetime_starttime_format }}"><time datetime="{{ datetime_startdate_format }}">{{ start_date }}</time>- <time datetime="{{ datetime_starttime_format }}">{{ start_time}}</time>
        {% endif  %}
      </p>

      <!-- If location -->
      {% if location|default %}
        <p>
          <span class="small-text qh__single-event__meta__label">Location: </span>
          <span class="qh__single-event__meta__address">{{ location }}</span>
        </p>
      {% endif %}

      <!-- If Virtual Meeting URL present (new field) -->
      {% if virtual_link_url %}
        <p>
          <span class="small-text qh__single-event__meta__label">Virtual Meeting: </span>
          <a class="qh__single-event__meta__url" href="{{ virtual_link_url }}">{{ virtual_link_url }}</a>
        </p>
      {% endif %}

      <!-- If Registration Required URL present (new field) -->
      {% if registration_link_url %}
        <p>
          <span class="small-text qh__single-event__meta__label">Registration: </span>
          <a class="qh__single-event__meta__url" href="{{ registration_link_url }}">{{ registration_link_url }}</a>
        </p>
      {% endif %}
    </div>
  </header>

  <div class="qh__single-event__content">
    {% if content.field_event_body|default  %}
      <!-- Description -->
      {{ content.field_event_body }}
    {% endif %}

    {% if content.field_event_paragraphs|default  %}
      <!-- Paragraph content -->
      {{ content.field_event_paragraphs }}
    {% endif %}
  </div>

  <!-- Only if Contact or Event Type has data -->
  {% if node.field_event_type.value|default or node.field_event_contact.value|default %}

    <footer class="qh__single-event__footer">
      <!-- If Event Type -->
      {% if node.field_event_type.value|default %}
        <p>
          <span class="small-text qh__single-event__meta__label">Event Type: </span>
          {{ content.field_event_type }}
        </p>
      {% endif %}

      <!-- If Contact -->
      {% if node.field_event_contact.value|default %}
        <p>
          <span class="small-text qh__single-event__meta__label">Contact: </span>
          {{ node.field_event_contact.value }}
        </p>
      {% endif %}

    </footer>
  {% endif %}
</article>
