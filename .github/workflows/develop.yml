# Runs and tests the develop.sh script
---
name: Test the Ecms Profile
on:
  push:
    branches:
      - '**'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
#  test:
#    runs-on: ubuntu-20.04
#    container:
#      image: php:7.3-apache
#      ports:
#        - 80:80
#      options: --network-alias=appserver
#    env:
#      SIMPLETEST_DB: sqlite://web/.ht.sqlite
#      SIMPLETEST_BASE_URL: http://appserver
#      DTT_BASE_URL: http://appserver
#    steps:
#      - name: Test
#        run: |
#          cd /var/www/
#          rm -Rf html
#      - name: Run the develop CI script.
#        run: ./scripts/develop-ci.sh

  build:
    name: develop.sh
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

#      - name: Cache the vendor directory
#        id: drupal-cache
#        run: |
#            echo "::set-output name=dir::../develop-ecms-profile/vendor"
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ steps.drupal-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('composer.json') }}

      - name: Run the develop CI script.
        run: ./scripts/develop-ci.sh
        if: steps.drupal-cache.outputs.cache-hit != 'true'

      - name: Register the build directory.
        id: drupalarchivepath
        run: |
          cd ../develop-ecms-profile
          echo "::set-output name=dir::$(pwd)"

      - name: Echo the archive path.
        run: |
          echo "${{ steps.drupalarchivepath }}


      - name: Check coding standards.
        run: |
          cd ../develop-ecms-profile
          ./vendor/bin/phpcs --standard=../ecms_profile/phpcs.xml

      - name: Run unit tests.
        run: |
          cd ../develop-ecms-profile
          ./vendor/bin/phpunit --configuration=../ecms_profile/phpunit-ci.xml --testsuite=unit

      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: path/to/artifact/world.txt

#      - name: Install the site.
#        run: |
#          cd ../develop-ecms-profile
#          ./vendor/bin/drush si --db-url=sqlite://web/.ht.sqlite --yes
#
#      - name: Start php built in web server.
#        run: |
#          cd ../develop-ecms-profile
#          php -S localhost:4000 web/index.php
#
#      - name: Run functional tests.
#        run: |
#          cd ../develop-ecms-profile
#          export ENCRYPTION_PRIVATE_KEY=$(dd if=/dev/urandom bs=32 count=1 | base64 -i -)
#          ./vendor/bin/phpunit --configuration=../ecms_profile/phpunit-ci.xml --testsuite=functional

#      - name: Prepare environment for Lando use
#        run: |
#          mkdir -p ~/.ssh
#
#      - name: Install Lando
#        run: |
#          pushd /tmp
#          wget https://files.devwithlando.io/lando-stable.deb
#          sudo dpkg -i --ignore-depends=docker-ce lando-stable.deb
#          popd
#
#      - name: Print directory.
#        run: |
#          pwd
#
##      - name: Cache the lando environment
##        id: lando-cache
##        run: |
##            echo "::set-output name=dir::/home/runner/work/ecms_profile/develop-ecms-profile"
##
##      - uses: actions/cache@v2
##        with:
##          path: ${{ steps.lando-cache.outputs.dir }}
##          key: ${{ runner.os }}-composer-${{ hashFiles('/home/runner/work/ecms_profile/ecms_profile/composer.json') }}
#
#      - name: Run the development script (if not cached)
#        run: ./scripts/develop.sh
##        if: steps.lando-cache.outputs.cache-hit != 'true'
##
##      - name: Restore the lando environment from cache
##        run: |
##          cd ../develop-ecms-profile
##          lando start
##          lando drush si ecms_base --yes
##        if: steps.lando-cache.outputs.cache-hit == 'true'
#
#      - name: Check coding standards.
#        run: |
#          cd ../develop-ecms-profile
#          lando phpcs
#
#      - name: Run gulp validate.
#        run: |
#          cd ../develop-ecms-profile
#          lando gulp-distro validate
#
#      - name: Run unit tests.
#        run: |
#          cd ../develop-ecms-profile
#          pwd
#          lando phpunit --testsuite=unit
#
##      - name: Run functional tests in parallel.
##        run: |
##          cd ../develop-ecms-profile
##          lando paratest -p4 --testsuite=functional /ecms_profile
##
##      - name: Run existing tests.
##        run: |
##          cd ../develop-ecms-profile
##          lando paratest -p4 --testsuite=existing --bootstrap=/app/vendor/weitzman/drupal-test-traits/src/bootstrap-fast.php /ecms_profile
