<?php

/**
 * @file
 * ecms_migration.module
 */

declare(strict_types = 1);

use Drupal\Core\File\FileUrlGenerator;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for the ecms_file_redirect migration.
 */
function xxecms_migration_migrate_ecms_file_redirect_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration): void {
  // Ensure we have the right public files directory for the current site.
  $public_file_path = rtrim(FileUrlGenerator::transformRelative(\Drupal::service('file_url_generator')->generateAbsoluteString('public://')), "/");

  // Make sure this is a valid internal Uri.
  $public_file_path = "internal:{$public_file_path}";

  // Replace the DRUPAL_FILE_DIRECTORY constant with the site specific value.
  $row
    ->setSourceProperty('constants/DRUPAL_FILE_DIRECTORY', $public_file_path);
}

/**
 * Implements hook_migrate_prepare_row() for ecms_health_file_migration.
 */
function ecms_health_file_migration_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  \Drupal::logger('my_module')->notice(print_r($migration->id(), TRUE));
  $type_of_material = $row->getSourceProperty('type_of_material');
  $subtype_of_material = $row->getSourceProperty('subtype_of_material');
  $resource_category_term_ids = combine_resource_category_fields($type_of_material, $subtype_of_material);
  $row->setDestinationProperty('field_resource_category', $resource_category_term_ids);
}

/**
 * Custom callback function to map two source values to a taxonomy reference field.
 */
function combine_resource_category_fields($type_of_material, $type_of_material) {

  // Ensure that the values are either strings in double quotes or null.
//  $type_of_material = ($type_of_material === 'null' || $type_of_material === null) ? null : trim($type_of_material, '"');
//  $type_of_material = ($type_of_material === 'null' || $type_of_material === null) ? null : trim($type_of_material, '"');

  // Combine the values into an array for the taxonomy reference field.
  $combined_values = [];

  // Add the non-null and non-empty values to the array.
  if ($type_of_material !== null && $type_of_material !== '') {
    $combined_values[] = $type_of_material;
  }

  if ($type_of_material !== null && $type_of_material !== '') {
    $combined_values[] = $type_of_material;
  }

  // Check and create terms in the destination database if they don't exist.
  $termIds = [];
  foreach ($combined_values as $value) {
    // Case-insensitive search for existing term in resource_category vocabulary.
    $existingTerms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'name' => mb_strtolower($value),
        'vid' => 'resource_category',
      ]);

    if (!empty($existingTerms)) {
      // Use the existing term.
      $termId = key($existingTerms);
    } else {
      // Create a new term.
      $term = Term::create([
        'vid' => 'resource_category',
        'name' => $value,
      ]);
      $term->save();
      $termId = $term->id();
    }

    $termIds[] = $termId;
  }

  // Return the combined term IDs.
  return $termIds;
}
